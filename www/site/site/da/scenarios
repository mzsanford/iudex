Need a short hand to respresent various FEED/PAGE fetch/update scenarios.

== SCENARIO 1: First time feed ==

POLL->

C: url=feed-url-1, type=FEED, last_visit=null

FETCH-> 200
C: etag, cache_file, cache_offset, last_visit (prior_last_visit)
PARSE-> success

C: type=FEED,
   references={
      url=page-url-1, type=PAGE, ref_pub_date=1, title=t1
      url=page-url-2, type=PAGE, ref_pub_date=2, title=t2
   }

PriorityFilter-> priority, next_visit_after

FILTER->
For each reference (R):
   Title normalize
   pub_date tester (not future, etc.)

DB WRITE ->

(TRANSACTION BEGIN)

WRITE references ->

For each reference (R):
  if R exists (gcid)
    if ref_pub_date != prior ref_pub_date
      UPDATE ref_pub_date, pub_date, title, priority(-update,date), next_visit_after=now(), [referer (C:gcid)]
    else
      ignore (gcid,ref_pub_date equal; title difference ignored)
    end
  else
    INSERT gcid, url, host, ref_pub_date, pub_date, title, priority(date), [next_visit_after=now()],
           referer (C:gcid)
  end

IMPLEMENTATION:

(a) 1. query for gcid,pub_date where gcid in (references), Update this set, insert the remainder

(b) Update trigger, with priority penality on UPDATE from
change, or ignore if no change?  Return number of insert,updates for
prioritization?

*[] : Assigned by DB writer?

UPDATE C: type=FEED, etag, cache_file, cache_offset, last_visit (prior_last_visit), priority

(TRANSACTION COMMIT)

== SCENARIO 2a: PAGE, ACCEPT

C: url=page-url-1, type=PAGE, ref_pub_date=1, title=t1, referer=gcid(feed-url-1)

FETCH (url, referer, etag=null, last_visit=null) -> 200

C: etag=V, last_visit=NOW

== SCENARIO 2b: PAGE, REDIRECT, ACCEPT

C: url=page-url-1, type=PAGE, ref_pub_date=1, title=t1, referer=gcid(feed-url-1)

FETCH (url, referer, etag=null, last_visit=null) -> 302

C: url=page-url-1-redirect, [last_visit=NOW],
   referer: url=page-url-1, status=302, ref_pub_date=1 (copy from C?), [referent=gcid(page-url-1-redirect)]

PROCESS, WRITE ->

C: cache_file=f, cache_file_offest=o

DB WRITE ->

(TRANSACTION BEGIN)

referer: UPDATE status, ref_pub_date, last_visit, next_visit_after=null, priority, referent

C:
if C exists (gcid)
    UPDATE (ref_pub_date), pub_date, title, next_visit_after(last_visit), priority(-),
           cache_file=f, cache_file_offest=o
else
    INSERT gcid, url, host, (ref_pub_date), pub_date, title, next_visit_after(last_visit), priority(-)
           referer, cache_file=f, cache_file_offest=o
end

Note: On update, old cache_file, cache_file_offset lost (ok, I think).

(TRANSACTION END)

== SCENARIO 2c: PAGE, HTTP 404
